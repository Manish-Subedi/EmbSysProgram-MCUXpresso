/*
===============================================================================
 Name        : main.c
 Author      : Manish Subedi
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#if 1 //exercise-1 starts here

#include <cr_section_macros.h>
#include <ctype.h>
#include "DigitalIoPin.h"
#include "jsmn.h"
#include <cstring>
#include <atomic>
static volatile std::atomic_int counter;
#ifdef __cplusplus
extern "C" {
#endif
/*
* @brief Handle interrupt from SysTick timer
* @return Nothing
*/
/*
void SysTick_Handler(void)
{
if(counter > 0) counter--;
}
#ifdef __cplusplus
}
#endif
void Sleep(int ms)
{
counter = ms;
while(counter > 0) {
__WFI();
}
}
*/
#define TICKRATE_HZ1 (1000)

int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
#endif
#endif

    //configure clock frequency to 1000Hz
	uint32_t sysTickRate;
	Chip_Clock_SetSysTickClockDiv(1);
	sysTickRate = Chip_Clock_GetSysTickClockRate();
	SysTick_Config(sysTickRate / TICKRATE_HZ1);

	// instantiate objects for SW1 and LED(green)
	DigitalIoPin sw1(0, 17, true, true, true); //inverted digitalIO pin
	DigitalIoPin green(0, 3, false, false, true);

    Board_UARTPutSTR("\r\nHello, World\r\n");
    Board_UARTPutChar('!');
    Board_UARTPutChar('\r');
    Board_UARTPutChar('\n');

    jsmn_parser parser;
    jsmn_init(&parser);
    //variable to read the char input into
    int c;
    int count = 0;
    while(1) {
    	jsmntok_t tokens[256];
    	const char *js;
    	int r;

    	js = { "\"name\" \: \"Jack\"\, \"age\" \: 27" };
    	r = jsmn_parse(&parser, js, strlen(js), tokens, 256);

    	if(count % 5000 == 0){
    		Board_UARTPutSTR(js);
    	}
    	// read the switch press
    	if(sw1.read()) {
    		while(sw1.read());
    		//toggle the status of the LED
    		Board_LED_Toggle(1); //green is at LED[1]
    	}
    	// read the char input from Putty
        c = Board_UARTGetChar();
        if(c != EOF){
        	if(c == '\r') Board_UARTPutChar('\n');
			if(green.read()){	// Convert to uppercase if LED is ON
				Board_UARTPutChar(toupper(c));
			}
			else Board_UARTPutChar(tolower(c));	//convert to lowercase if LED is OFF
        	if(c == '\n') Board_UARTPutChar('\r');
        }
    }
    count ++;
    return 0 ;
}
#endif //exercise-1 ends here

#if 0 //exercise-2 starts here

#include <cr_section_macros.h>
#include <ctype.h> //toupper()
#include "DigitalIoPin.h"
#include "MorseSender.h"
//#include <cstring> //check if the code runs without this**********
#include <stdlib.h>

#define TICKRATE_HZ1 (1000)

#define LEN (80)

int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
#endif
#endif

    //configure clock frequency to 1000Hz
	uint32_t sysTickRate;
	Chip_Clock_SetSysTickClockDiv(1);
	sysTickRate = Chip_Clock_GetSysTickClockRate();
	SysTick_Config(sysTickRate / TICKRATE_HZ1);

    DigitalIoPin a0(0, 8, false, false, false);
    DigitalIoPin red(0, 25, false, false, false);

	MorseSender obj(&red, &a0);

	obj.a0->write(false);
	obj.red->write(true);
	int i=0;
	//variable to read the char input into
	int c;
	char str[LEN];
	while(1){
		while(1){
		 c = Board_UARTGetChar();
		 if(c != EOF) {
			 if(c == '\r' || c == '\n') break;
			 if (i == LEN) break;
			 str[i] = char(c);
			 i++;
			 Board_UARTPutChar(c);
		 	 }
		}
		str[i] = '\0';
		obj.sendMorse(str, 20);
	}
	return 0 ;
}
#endif //exercise-2 ends here

//Interrupt Service Routine
#if 0 //exercise 3 begins here

#include <cr_section_macros.h>

#include <cstring>
#include <ctype.h>
#include "DigitalIoPin.h"
#include "MorseSender.h"
#include "lpcUart.h"

#define TICKRATE_HZ1 (1000)

#define LEN 80

volatile static int i;

int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
#endif
#endif

    //configure clock frequency to 1000Hz
	uint32_t sysTickRate;
	Chip_Clock_SetSysTickClockDiv(1);
	sysTickRate = Chip_Clock_GetSysTickClockRate();
	SysTick_Config(sysTickRate / TICKRATE_HZ1);

	LpcPinMap none = {-1, -1}; // unused pin has negative values in it
	LpcPinMap txpin = { 0, 18 }; // transmit pin that goes to debugger's UART->USB converter
	LpcPinMap rxpin = { 0, 13 }; // receive pin that goes to debugger's UART->USB converter
	LpcUartConfig cfg = { LPC_USART0, 115200, UART_CFG_DATALEN_8 | UART_CFG_PARITY_NONE | UART_CFG_STOPLEN_1, false, txpin, rxpin, none, none };

	LpcUart dbgu(cfg);

	DigitalIoPin a0(0, 8, false, false, false);
	DigitalIoPin red(0, 25, false, false, false);

	MorseSender obj(&red, &a0);

	int total_char = 0; //number of char read
	char str[LEN]; //limit the reading to 80 chars
	char buffer[LEN];
	int dot_length = 50; // almost 20wpm
	int wpm = 0;
	int m=0;

	while(1){
		total_char = dbgu.read(buffer, LEN);
			for(int j=0; j<total_char; j++){
				if(buffer[j] != 0){
					if(buffer[j] == '\r' || buffer[j] == '\n'){
						if(strncmp(str, "send ", 5) == 0){
							obj.sendMorse(str+5, dot_length);
							//erase = true;
						}
						else if(strstr(str, "wpm ") != NULL){
							if(sscanf(str+4, "%d", &wpm)==1){
								dot_length = 1000 / wpm;
								//erase = true;
							}
						}
						else if (strncmp(str, "set", 3) == 0){
							char buffer[50];
							snprintf(buffer, 50, "WPM is %d and Dot Length is %d", wpm, dot_length);
							obj.sendMorse(buffer, dot_length);
						}
							buffer[0]='\0';
							str[0] = '\0';
							total_char = 0;
							j=0;
							m=0;
					}
					else {
						str[m] = buffer[j];
						str[m+1]='\0';
						m++;
					}
				}
				else {
					obj.sendMorse("Encountered an error! Try again.", dot_length);
				}
			}
		i++;
		__asm volatile ("nop");
	}
	return 0;
};

#endif // exercise 3 ends here
