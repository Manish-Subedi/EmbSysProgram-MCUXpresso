/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <cr_section_macros.h>

#include "LpcUart.h"
#include "DigitalIOPin.h"
#include "ITM_write.h"
#include "I2C.h"
#include "Sleep.h"

int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
    // Set the LED to the state of "On"
    Board_LED_Set(2, true);
#endif
#endif
    ITM_init();
    Board_Startup();
    // TODO: insert code here
    LpcPinMap none = {-1, -1}; // unused pin has negative values in it
	LpcPinMap txpin = { 0, 18 }; // transmit pin that goes to debugger's UART->USB converter
	LpcPinMap rxpin = { 0, 13 }; // receive pin that goes to debugger's UART->USB converter
	LpcUartConfig cfg_d = { LPC_USART0, 115200, UART_CFG_DATALEN_8 | UART_CFG_PARITY_NONE | UART_CFG_STOPLEN_1, false, txpin, rxpin, none, none };

	LpcUart dbgu(cfg_d);
	//ITMhandler itm();
	DigitalIoPin SW3(1, 9, true, true, false);

	bool button = SW3.read();
	// Force the counter to be placed into memory
	volatile static int i = 0 ;

	I2C_config cofg;
	I2C i2c(cofg);
	uint8_t tx[1];
	uint8_t rx [1];

	while(1){


		if(button){
			char str[32];
			tx[0] = 0x01;

			while(button);
			if(!button){
				if(i2c.transaction(0x4A, tx, 1, rx, 1)){
					tx[0] = 0x00;
					i2c.transaction(0x4A, tx, 1, rx, 1);
					snprintf(str, 50, "Temperature: %d C\n", static_cast<signed char>(rx[0]));
					ITM_write(str);
				}
				else{
					ITM_write("error");
				}
			}
		}

		Sleep(100);
	    // Enter an infinite loop, just incrementing a counter
		i++;
        // "Dummy" NOP to allow source level single
        // stepping of tight while() loop
        //__asm volatile ("nop");
    }
    return 0 ;
}
