/*
 * MqttController.cpp
 *
 *  Created on: 21 Oct 2022
 *      Authur: Manish
 */
#if 1
#include "MqttController.h"
#include "MainHeader.h"

MqttController::MqttController(void (*message_handler_)(MessageData* data)):
	client(), network(), message_handler(message_handler_)
{
	connectData = MQTTPacket_connectData_initializer;
}

void MqttController::Mqtt_start(const char* ssid, const char* password, char* ip, int port)
{
	//connect to network and initialize MQTT
	NetworkInit(&network, ssid, password);
	MQTTClientInit(&client, &network, MQTT_TIMEOUT, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));

	if ((rc = NetworkConnect(&network, ip, port)) != 0)
		printf("Return code from network connect is %d\n", rc);

	connectData.MQTTVersion = 3;
	connectData.clientID.cstring = (char *)"group5";

	if ((rc = MQTTConnect(&client, &connectData)) != 0)
		printf("Return code from MQTT connect is %d\n", rc);
	else
		printf("MQTT Connected\n");
}

MqttController::~MqttController() {}


void MqttController::subscribe(const char *topic)
{
	rc = MQTTSubscribe(&client, topic, QOS2, message_handler);
}

void MqttController::publish(const char *topic, char *payload, size_t size)
{
	MQTTMessage message;

	message.qos = QOS1;
	message.retained = 0;
	message.payload = payload;
	message.payloadlen = size;

	rc = MQTTPublish(&client, topic, &message);
	return rc;
		//printf("Return code from MQTT publish is %d\n", rc);
}


void MqttController::disconnect(MQTTClient* client)
{
	MQTTDisconnect(client);
}

/** A call to this API must be made within the keepAlive interval to keep the MQTT connection alive
     *  yield can be called if no other MQTT operation is needed.  This will also allow messages to be
     *  received.
     *  @param timeout_ms the time to wait, in milliseconds
     *  @return success code - on failure, this means the client has disconnected
     */
void MqttController::yield(int timeout_ms)
{
	MQTTYield(&client, timeout_ms);
}

int MqttController::enquire_status()
{
	if(rc == 0) printf("All good, Relax!");
	return rc;
}

#endif
